<?php

include_once('ca_products.features.inc');

/**
 * Implementation of hook_perm().
 */
function ca_products_perm() {
  return array('ca_products change templates');
}

/**
 * Implementation of hook_menu().
 */
function ca_products_menu() {
  $items['admin/settings/ca_products'] = array(
    'title' => 'Context Admin: Products',
    'description' => 'Change the look and feel of the ca_products feature.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ca_products_admin_settings_form'),
    'access arguments' => array('ca_products change templates'),
    'file' => 'ca_products.admin.inc',
    'file path' => drupal_get_path('module', 'ca_products') . '/includes',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implementation of hook_ctools_plugin_directory()
 */
function ca_products_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools') {
    return 'plugins/' . $plugin_type;;
  }
}

/**
 * Implementation of hook_ctools_render_alter($info, $page, $args, $contexts, $task, $subtask).
 */
function ca_products_ctools_render_alter($info, $page, $args, $contexts, $task, $subtask){
  if ($subtask['name'] == 'ca_products_category_list' || $task['name'] == 'node_view') {
    drupal_add_css(drupal_get_path('module', 'ca_products') . "/css/ca_products.css", 'module', 'all', FALSE);
  }
}

/**
 * Implementation of hook_views_pre_render().
 */
function ca_products_views_pre_render(&$view) {
  if ($view->name == 'ca_products') {
    drupal_add_css(drupal_get_path('module', 'ca_products') . "/css/ca_products.css", 'module', 'all', FALSE);
  }
}

/**
 * Implementation of hook_token_list().
 */
function ca_products_token_list($type = 'all') {
  $tokens = array();

  if ($type == 'node' || $type == 'all') {
    // Node tokens here.
    $tokens['node']['ca-products-category-parent-reference-path'] = t("WARNING: This token expects a particular node reference field. This should never be used outside of the ca_products feature.");
  }

  return $tokens;
}

/**
 * Implementation of hook_token_values().
 */
function ca_products_token_values($type, $object = NULL) {
  $values = array();
  switch ($type) {
    case 'node':
      // Node tokens here.
      $parent_node_id = $object->field_ca_product_category_parent[0]['nid'];
      $parent_node = node_load($parent_node_id);
      $parent_node_path = $parent_node->path;
      if ($parent_node_id != '') {
        $values['ca-products-category-parent-reference-path'] = $parent_node_path;
      }
      else {
        $values['ca-products-category-parent-reference-path'] = 'products';
      }
      break;
  }
  return $values;
}
